# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type User {
  id: Int!
  email: String!
  firstName: String!
  lastName: String!
  username: String!
  bio: String
  updatedAt: DateTime
  createdAt: DateTime
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Artist {
  id: Int!
  firstName: String
  lastName: String
  artistName: String!
  bio: String
}

type Location {
  id: Int!
  addressLine1: String!
  addressLine2: String
  city: String!
  postcode: String
}

type Event {
  id: Int!
  title: String!
  description: String!
  startTime: DateTime!
  endTime: DateTime
  genre: Genre!
  userId: Int!
  locationId: Int!
  createdAt: DateTime!
  updatedAt: DateTime
  capacity: Int
  creator: User
  location: Location
  artists: [Artist!]
}

"""Music genres for events"""
enum Genre {
  DUBSTEP
  HOUSE
  TECHNO
  GARAGE
  AMAPIANO
  DONK
  TRANCE
  DRUM_AND_BASS
  JUNGLE
  FOOTWORK
}

type Registration {
  id: Int!
  status: RegistrationStatus!
  user: User!
  event: Event!
}

"""Registration status for events"""
enum RegistrationStatus {
  INTERESTED
  ATTENDING
  NOT_ATTENDING
}

type Review {
  """review id"""
  id: Int!

  """out of ten score for an event"""
  score: Int!

  """review description"""
  description: String!

  """review description"""
  event: Event!

  """review description"""
  user: User!
}

type Query {
  users: [User!]!
  user(id: Int!): User
  events: [Event!]!
  event(id: Int!): Event!
  eventsByGenre(genre: Genre!): [Event!]!
  registrations: [Registration!]!
  registration(id: Int!): Registration!
  reviews: [Review!]!
  review(id: Int!): Review!
}

type Mutation {
  createUser(createUserInput: CreateUserInput!): User!
  updateUser(id: Int!, updateUserInput: UpdateUserInput!): User!
  removeUser(id: Int!): User!
  createEvent(createEventInput: CreateEventInput!): Event!
  updateEvent(updateEventInput: UpdateEventInput!): Event!
  removeEvent(id: Int!): Event!
  createRegistration(createRegistrationInput: CreateRegistrationInput!): Registration!
  updateRegistration(updateRegistrationInput: UpdateRegistrationInput!): Registration!
  removeRegistration(id: Int!): Registration!
}

input CreateUserInput {
  email: String!
  name: String
}

input UpdateUserInput {
  email: String
  name: String
}

input CreateEventInput {
  title: String!
  description: String!
  startTime: DateTime!
  endTime: DateTime!
  genre: Genre!
  userId: Int!
  locationId: Int!
  capacity: Int
  artistIds: [Int!]
}

input UpdateEventInput {
  title: String
  description: String
  startTime: DateTime
  endTime: DateTime
  genre: Genre
  userId: Int
  locationId: Int
  capacity: Int
  artistIds: [Int!]
  id: Int!
}

input CreateRegistrationInput {
  eventId: Int!
  userId: Int!
  status: RegistrationStatus!
}

input UpdateRegistrationInput {
  eventId: Int
  userId: Int
  status: RegistrationStatus
  id: Int!
}