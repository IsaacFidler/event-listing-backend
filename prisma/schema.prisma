generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Genre {
  DUBSTEP
  HOUSE
  TECHNO
  GARAGE
  AMAPIANO
  DONK
  TRANCE
  DRUM_AND_BASS
  JUNGLE
  FOOTWORK
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  firstName String
  lastName  String
  username  String    @unique
  bio       String?
  updatedAt DateTime? @map("updated_at")
  createdAt DateTime? @default(now()) @map("create_at")

  artists Artist[]
  reviews Review[]

  //Prisma relations
  registrations Registration[]
  events        Event[]
}

model Artist {
  id         Int     @id @default(autoincrement())
  firstName  String?
  lastName   String?
  artistName String  @unique
  bio        String?

  updatedAt DateTime? @map("updated_at")
  createdAt DateTime? @default(now()) @map("create_at")

  //Prisma relations
  events Event[]

  //fk relations
  user   User @relation(fields: [userId], references: [id])
  userId Int
}

model Location {
  id           Int       @id @default(autoincrement())
  addressLine1 String    @map("address_line_1")
  addressLine2 String?   @map("address_line_2")
  city         String
  postcode     String?
  lat          Float?
  lng          Float?
  updatedAt    DateTime? @map("updated_at")
  createdAt    DateTime? @default(now()) @map("create_at")

  events Event[]
  vanues Venue[]
}

model Event {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  startTime   DateTime  @map("start_time")
  endTime     DateTime  @map("end_time")
  updatedAt   DateTime? @map("updated_at")
  createdAt   DateTime? @default(now()) @map("create_at")
  capacity    Int?      @default(100)
  genre       Genre

  // fk relations
  creator User @relation(fields: [userId], references: [id])
  userId  Int

  location   Location @relation(fields: [locationId], references: [id])
  locationId Int

  //prisma relations

  artists       Artist[]
  registrations Registration[]
  reviews       Review[]
}

model Venue {
  id      Int     @id @default(autoincrement())
  title   String
  bio     String
  website String?

  location   Location @relation(fields: [locationId], references: [id])
  locationId Int
}

enum RegistrationStatus {
  INTERESTED
  ATTENDING
  NOT_ATTENDING
}

model Registration {
  id Int @id @default(autoincrement())

  status RegistrationStatus

  user   User @relation(fields: [userId], references: [id])
  userId Int

  event   Event @relation(fields: [eventId], references: [id])
  eventId Int

  updatedAt DateTime? @map("updated_at")
  createdAt DateTime? @default(now()) @map("create_at")
}

model Review {
  id          Int    @id @default(autoincrement())
  score       Int
  description String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  event   Event @relation(fields: [eventId], references: [id])
  eventId Int

  updatedAt DateTime? @map("updated_at")
  createdAt DateTime? @default(now()) @map("create_at")
}
